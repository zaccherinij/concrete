use crate::backends::core::implementation::engines::CoreEngine;
use crate::backends::core::implementation::entities::{
    Cleartext32, Cleartext64, CleartextVector32, CleartextVector64, GlweCiphertext32,
    GlweCiphertext64, GlweCiphertextVector32, GlweCiphertextVector64, GlweSecretKey32,
    GlweSecretKey64, LweBootstrapKey32, LweBootstrapKey64, LweCiphertext32, LweCiphertext64,
    LweCiphertextVector32, LweCiphertextVector64, LweKeyswitchKey32, LweKeyswitchKey64,
    LweSecretKey32, LweSecretKey64, Plaintext32, Plaintext64, PlaintextVector32, PlaintextVector64,
};
use crate::backends::core::private::math::tensor::AsMutTensor;
use crate::specification::engines::{DestructionEngine, DestructionError};

impl DestructionEngine<Cleartext32> for CoreEngine {
    fn destroy(&mut self, entity: Cleartext32) -> Result<(), DestructionError<Self::EngineError>> {
        unsafe { self.destroy_unchecked(entity) };
        Ok(())
    }

    unsafe fn destroy_unchecked(&mut self, entity: Cleartext32) {}
}

impl DestructionEngine<Cleartext64> for CoreEngine {
    fn destroy(&mut self, entity: Cleartext64) -> Result<(), DestructionError<Self::EngineError>> {
        unsafe { self.destroy_unchecked(entity) };
        Ok(())
    }

    unsafe fn destroy_unchecked(&mut self, entity: Cleartext64) {}
}

impl DestructionEngine<CleartextVector32> for CoreEngine {
    fn destroy(
        &mut self,
        entity: CleartextVector32,
    ) -> Result<(), DestructionError<Self::EngineError>> {
        unsafe { self.destroy_unchecked(entity) };
        Ok(())
    }

    unsafe fn destroy_unchecked(&mut self, entity: CleartextVector32) {}
}

impl DestructionEngine<CleartextVector64> for CoreEngine {
    fn destroy(
        &mut self,
        entity: CleartextVector64,
    ) -> Result<(), DestructionError<Self::EngineError>> {
        unsafe { self.destroy_unchecked(entity) };
        Ok(())
    }

    unsafe fn destroy_unchecked(&mut self, entity: CleartextVector64) {}
}

impl DestructionEngine<Plaintext32> for CoreEngine {
    fn destroy(&mut self, entity: Plaintext32) -> Result<(), DestructionError<Self::EngineError>> {
        unsafe { self.destroy_unchecked(entity) };
        Ok(())
    }

    unsafe fn destroy_unchecked(&mut self, entity: Plaintext32) {}
}

impl DestructionEngine<Plaintext64> for CoreEngine {
    fn destroy(&mut self, entity: Plaintext64) -> Result<(), DestructionError<Self::EngineError>> {
        unsafe { self.destroy_unchecked(entity) };
        Ok(())
    }

    unsafe fn destroy_unchecked(&mut self, entity: Plaintext64) {}
}

impl DestructionEngine<PlaintextVector32> for CoreEngine {
    fn destroy(
        &mut self,
        entity: PlaintextVector32,
    ) -> Result<(), DestructionError<Self::EngineError>> {
        unsafe { self.destroy_unchecked(entity) };
        Ok(())
    }

    unsafe fn destroy_unchecked(&mut self, entity: PlaintextVector32) {}
}

impl DestructionEngine<PlaintextVector64> for CoreEngine {
    fn destroy(
        &mut self,
        entity: PlaintextVector64,
    ) -> Result<(), DestructionError<Self::EngineError>> {
        unsafe { self.destroy_unchecked(entity) };
        Ok(())
    }

    unsafe fn destroy_unchecked(&mut self, entity: PlaintextVector64) {}
}

impl DestructionEngine<LweCiphertext32> for CoreEngine {
    fn destroy(
        &mut self,
        entity: LweCiphertext32,
    ) -> Result<(), DestructionError<Self::EngineError>> {
        unsafe { self.destroy_unchecked(entity) };
        Ok(())
    }

    unsafe fn destroy_unchecked(&mut self, entity: LweCiphertext32) {}
}

impl DestructionEngine<LweCiphertext64> for CoreEngine {
    fn destroy(
        &mut self,
        entity: LweCiphertext64,
    ) -> Result<(), DestructionError<Self::EngineError>> {
        unsafe { self.destroy_unchecked(entity) };
        Ok(())
    }

    unsafe fn destroy_unchecked(&mut self, entity: LweCiphertext64) {}
}

impl DestructionEngine<LweCiphertextVector32> for CoreEngine {
    fn destroy(
        &mut self,
        entity: LweCiphertextVector32,
    ) -> Result<(), DestructionError<Self::EngineError>> {
        unsafe { self.destroy_unchecked(entity) };
        Ok(())
    }

    unsafe fn destroy_unchecked(&mut self, entity: LweCiphertextVector32) {}
}

impl DestructionEngine<LweCiphertextVector64> for CoreEngine {
    fn destroy(
        &mut self,
        entity: LweCiphertextVector64,
    ) -> Result<(), DestructionError<Self::EngineError>> {
        unsafe { self.destroy_unchecked(entity) };
        Ok(())
    }

    unsafe fn destroy_unchecked(&mut self, entity: LweCiphertextVector64) {}
}

impl DestructionEngine<GlweCiphertext32> for CoreEngine {
<<<<<<< HEAD
=======
    /// # Example:
    /// ```
    /// use concrete_commons::dispersion::Variance;
    /// use concrete_core::prelude::*;
    /// let engine = CoreEngine::new();
    /// let glwe_dimension = 2;
    /// let polynomial_size = 1024;
    /// let input = vec![3 as u32; 100];
    /// let noise: Variance = from_variance(2_f64.powf(-25.));
    /// let key: GlweSecretKey32 = engine.generate_glwe_secret_key(glwe_dimension, polynomial_size);
    /// let plaintext_vector = engine.create_plaintext_vector(&input);
    /// let ciphertext: GlweCiphertext32 =
    ///     engine.encrypt_glwe_ciphertext(&key, plaintext_vector, noise);
    /// engine.destroy(key);
    /// engine.destroy(plaintext_vector);
    /// engine.destroy(ciphertext);
    /// ```
>>>>>>> dee4cf9 (WIP doc)
    fn destroy(
        &mut self,
        entity: GlweCiphertext32,
    ) -> Result<(), DestructionError<Self::EngineError>> {
        unsafe { self.destroy_unchecked(entity) };
        Ok(())
    }

    unsafe fn destroy_unchecked(&mut self, entity: GlweCiphertext32) {}
}

impl DestructionEngine<GlweCiphertext64> for CoreEngine {
<<<<<<< HEAD
=======
    /// # Example:
    /// ```
    /// use concrete_commons::dispersion::Variance;
    /// use concrete_core::prelude::*;
    /// let engine = CoreEngine::new();
    /// let glwe_dimension = 2;
    /// let polynomial_size = 1024;
    /// let input = vec![3 as u64; 100];
    /// let noise: Variance = from_variance(2_f64.powf(-25.));
    /// let key: GlweSecretKey64 = engine.generate_glwe_secret_key(glwe_dimension, polynomial_size);
    /// let plaintext_vector = engine.create_plaintext_vector(&input);
    /// let ciphertext: GlweCiphertext64 =
    ///     engine.encrypt_glwe_ciphertext(&key, plaintext_vector, noise);
    /// engine.destroy(key);
    /// engine.destroy(plaintext_vector);
    /// engine.destroy(ciphertext);
    /// ```
>>>>>>> dee4cf9 (WIP doc)
    fn destroy(
        &mut self,
        entity: GlweCiphertext64,
    ) -> Result<(), DestructionError<Self::EngineError>> {
        unsafe { self.destroy_unchecked(entity) };
        Ok(())
    }

    unsafe fn destroy_unchecked(&mut self, entity: GlweCiphertext64) {}
}

impl DestructionEngine<GlweCiphertextVector32> for CoreEngine {
    fn destroy(
        &mut self,
        entity: GlweCiphertextVector32,
    ) -> Result<(), DestructionError<Self::EngineError>> {
        unsafe { self.destroy_unchecked(entity) };
        Ok(())
    }

    unsafe fn destroy_unchecked(&mut self, entity: GlweCiphertextVector32) {}
}

impl DestructionEngine<GlweCiphertextVector64> for CoreEngine {
    fn destroy(
        &mut self,
        entity: GlweCiphertextVector64,
    ) -> Result<(), DestructionError<Self::EngineError>> {
        unsafe { self.destroy_unchecked(entity) };
        Ok(())
    }

    unsafe fn destroy_unchecked(&mut self, entity: GlweCiphertextVector64) {}
}

impl DestructionEngine<LweBootstrapKey32> for CoreEngine {
    fn destroy(
        &mut self,
        entity: LweBootstrapKey32,
    ) -> Result<(), DestructionError<Self::EngineError>> {
        unsafe { self.destroy_unchecked(entity) };
        Ok(())
    }

    unsafe fn destroy_unchecked(&mut self, entity: LweBootstrapKey32) {}
}

impl DestructionEngine<LweBootstrapKey64> for CoreEngine {
    fn destroy(
        &mut self,
        entity: LweBootstrapKey64,
    ) -> Result<(), DestructionError<Self::EngineError>> {
        unsafe { self.destroy_unchecked(entity) };
        Ok(())
    }

    unsafe fn destroy_unchecked(&mut self, entity: LweBootstrapKey64) {}
}

impl DestructionEngine<LweKeyswitchKey32> for CoreEngine {
    fn destroy(
        &mut self,
        entity: LweKeyswitchKey32,
    ) -> Result<(), DestructionError<Self::EngineError>> {
        unsafe { self.destroy_unchecked(entity) };
        Ok(())
    }

    unsafe fn destroy_unchecked(&mut self, entity: LweKeyswitchKey32) {}
}

impl DestructionEngine<LweKeyswitchKey64> for CoreEngine {
    fn destroy(
        &mut self,
        entity: LweKeyswitchKey64,
    ) -> Result<(), DestructionError<Self::EngineError>> {
        unsafe { self.destroy_unchecked(entity) };
        Ok(())
    }

    unsafe fn destroy_unchecked(&mut self, entity: LweKeyswitchKey64) {}
}

impl DestructionEngine<LweSecretKey32> for CoreEngine {
    fn destroy(
        &mut self,
        entity: LweSecretKey32,
    ) -> Result<(), DestructionError<Self::EngineError>> {
        unsafe { self.destroy_unchecked(entity) };
        Ok(())
    }

    unsafe fn destroy_unchecked(&mut self, entity: LweSecretKey32) {
        let mut entity = entity;
        entity.0.as_mut_tensor().fill_with_element(0u32);
    }
}

impl DestructionEngine<LweSecretKey64> for CoreEngine {
    fn destroy(
        &mut self,
        entity: LweSecretKey64,
    ) -> Result<(), DestructionError<Self::EngineError>> {
        unsafe { self.destroy_unchecked(entity) };
        Ok(())
    }

    unsafe fn destroy_unchecked(&mut self, entity: LweSecretKey64) {
        let mut entity = entity;
        entity.0.as_mut_tensor().fill_with_element(0u64);
    }
}

impl DestructionEngine<GlweSecretKey32> for CoreEngine {
<<<<<<< HEAD
=======
    /// # Example:
    /// ```
    /// use concrete_commons::dispersion::Variance;
    /// use concrete_core::prelude::*;
    /// let engine = CoreEngine::new();
    /// let glwe_dimension = 2;
    /// let polynomial_size = 1024;
    /// let glwe_secret_key: GlweSecretKey32 =
    ///     engine.generate_glwe_secret_key(glwe_dimension, polynomial_size);
    /// engine.destroy(glwe_secret_key);
    /// ```
>>>>>>> dee4cf9 (WIP doc)
    fn destroy(
        &mut self,
        entity: GlweSecretKey32,
    ) -> Result<(), DestructionError<Self::EngineError>> {
        unsafe { self.destroy_unchecked(entity) };
        Ok(())
    }

    unsafe fn destroy_unchecked(&mut self, entity: GlweSecretKey32) {
        let mut entity = entity;
        entity.0.as_mut_tensor().fill_with_element(0u32);
    }
}

impl DestructionEngine<GlweSecretKey64> for CoreEngine {
<<<<<<< HEAD
=======
    /// # Example:
    /// ```
    /// use concrete_commons::dispersion::Variance;
    /// use concrete_core::prelude::*;
    /// let engine = CoreEngine::new();
    /// let glwe_dimension = 2;
    /// let polynomial_size = 1024;
    /// let glwe_secret_key: GlweSecretKey64 =
    ///     engine.generate_glwe_secret_key(glwe_dimension, polynomial_size);
    /// engine.destroy(glwe_secret_key);
    /// ```
>>>>>>> dee4cf9 (WIP doc)
    fn destroy(
        &mut self,
        entity: GlweSecretKey64,
    ) -> Result<(), DestructionError<Self::EngineError>> {
        unsafe { self.destroy_unchecked(entity) };
        Ok(())
    }

    unsafe fn destroy_unchecked(&mut self, entity: GlweSecretKey64) {
        let mut entity = entity;
        entity.0.as_mut_tensor().fill_with_element(0u64);
    }
}
