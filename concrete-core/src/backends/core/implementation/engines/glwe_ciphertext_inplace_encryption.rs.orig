use crate::backends::core::implementation::engines::CoreEngine;
use crate::backends::core::implementation::entities::{
    GlweCiphertext32, GlweCiphertext64, GlweSecretKey32, GlweSecretKey64, PlaintextVector32,
    PlaintextVector64,
};
use crate::backends::core::private::crypto::glwe::GlweCiphertext as ImplGlweCiphertext;
use crate::specification::engines::{
    GlweCiphertextEncryptionEngine, GlweCiphertextEncryptionError,
    GlweCiphertextInplaceEncryptionEngine, GlweCiphertextInplaceEncryptionError,
};
use crate::specification::entities::{
    GlweCiphertextEntity, GlweSecretKeyEntity, PlaintextVectorEntity,
};
use concrete_commons::dispersion::Variance;

impl GlweCiphertextInplaceEncryptionEngine<GlweSecretKey32, PlaintextVector32, GlweCiphertext32>
    for CoreEngine
{
<<<<<<< HEAD
=======
    /// # Example:
    /// ```
    /// use concrete_commons::dispersion::Variance;
    /// use concrete_core::prelude::*;
    /// let engine = CoreEngine::new();
    /// let glwe_dimension_1 = 2;
    /// let glwe_dimension_2 = 1;
    /// let polynomial_size_1 = 1024;
    /// let polynomial_size_2 = 4096;
    /// let input = vec![3 as u32; 100];
    /// let noise: Variance = from_variance(2_f64.powf(-25.));
    /// let key_1: GlweSecretKey32 =
    ///     engine.generate_glwe_secret_key(glwe_dimension_1, polynomial_size_1);
    /// let plaintext_vector = engine.create_plaintext_vector(&input);
    /// let ciphertext = engine.encrypt_glwe_ciphertext(&key_1, plaintext_vector, noise);
    /// let key_2: GlweSecretKey32 =
    ///     engine.generate_glwe_secret_key(glwe_dimension_2, polynomial_size_2);
    /// engine.encrypt_glwe_ciphertext_inplace(&key_2, ciphertext, plaintext_vector, noise);
    /// assert_eq!(ciphertext.glwe_dimension(), glwe_dimension_2);
    /// assert_eq!(ciphertext.polynomial_size(), polynomial_size_2);
    /// engine.destroy(ciphertext);
    /// engine.destroy(plaintext_vector);
    /// engine.destroy(key_1);
    /// engine.destroy(key_2);
    /// ```
>>>>>>> dee4cf9 (WIP doc)
    fn inplace_encrypt_glwe_ciphertext(
        &mut self,
        key: &GlweSecretKey32,
        output: &mut GlweCiphertext32,
        input: &PlaintextVector32,
        noise: Variance,
    ) -> Result<(), GlweCiphertextInplaceEncryptionError<Self::EngineError>> {
        if key.polynomial_size() != output.polynomial_size() {
            return Err(GlweCiphertextInplaceEncryptionError::PolynomialSizeMismatch);
        }
        if key.glwe_dimension() != output.glwe_dimension() {
            return Err(GlweCiphertextInplaceEncryptionError::GlweDimensionMismatch);
        }
        if key.polynomial_size().0 != input.plaintext_count().0 {
            return Err(GlweCiphertextInplaceEncryptionError::PlaintextCountMismatch);
        }
        unsafe { self.inplace_encrypt_glwe_ciphertext_unchecked(key, output, input, noise) };
        Ok(())
    }

    unsafe fn inplace_encrypt_glwe_ciphertext_unchecked(
        &mut self,
        key: &GlweSecretKey32,
        output: &mut GlweCiphertext32,
        input: &PlaintextVector32,
        noise: Variance,
    ) {
        key.0.encrypt_glwe(
            &mut output.0,
            &input.0,
            noise,
            &mut self.encryption_generator,
        );
    }
}

impl GlweCiphertextInplaceEncryptionEngine<GlweSecretKey64, PlaintextVector64, GlweCiphertext64>
    for CoreEngine
{
<<<<<<< HEAD
=======
    /// # Example:
    /// ```
    /// use concrete_commons::dispersion::Variance;
    /// use concrete_core::prelude::*;
    /// let engine = CoreEngine::new();
    /// let glwe_dimension_1 = 2;
    /// let glwe_dimension_2 = 1;
    /// let polynomial_size_1 = 1024;
    /// let polynomial_size_2 = 4096;
    /// let input = vec![3 as u64; 100];
    /// let noise: Variance = from_variance(2_f64.powf(-25.));
    /// let key_1: GlweSecretKey64 =
    ///     engine.generate_glwe_secret_key(glwe_dimension_1, polynomial_size_1);
    /// let plaintext_vector = engine.create_plaintext_vector(&input);
    /// let ciphertext = engine.encrypt_glwe_ciphertext(&key_1, plaintext_vector, noise);
    /// let key_2: GlweSecretKey64 =
    ///     engine.generate_glwe_secret_key(glwe_dimension_2, polynomial_size_2);
    /// engine.encrypt_glwe_ciphertext_inplace(&key_2, ciphertext, plaintext_vector, noise);
    /// assert_eq!(ciphertext.glwe_dimension(), glwe_dimension_2);
    /// assert_eq!(ciphertext.polynomial_size(), polynomial_size_2);
    /// engine.destroy(ciphertext);
    /// engine.destroy(plaintext_vector);
    /// engine.destroy(key_1);
    /// engine.destroy(key_2);
    /// ```
>>>>>>> dee4cf9 (WIP doc)
    fn inplace_encrypt_glwe_ciphertext(
        &mut self,
        key: &GlweSecretKey64,
        output: &mut GlweCiphertext64,
        input: &PlaintextVector64,
        noise: Variance,
    ) -> Result<(), GlweCiphertextInplaceEncryptionError<Self::EngineError>> {
        if key.polynomial_size() != output.polynomial_size() {
            return Err(GlweCiphertextInplaceEncryptionError::PolynomialSizeMismatch);
        }
        if key.glwe_dimension() != output.glwe_dimension() {
            return Err(GlweCiphertextInplaceEncryptionError::GlweDimensionMismatch);
        }
        if key.polynomial_size().0 != input.plaintext_count().0 {
            return Err(GlweCiphertextInplaceEncryptionError::PlaintextCountMismatch);
        }
        unsafe { self.inplace_encrypt_glwe_ciphertext_unchecked(key, output, input, noise) };
        Ok(())
    }

    unsafe fn inplace_encrypt_glwe_ciphertext_unchecked(
        &mut self,
        key: &GlweSecretKey64,
        output: &mut GlweCiphertext64,
        input: &PlaintextVector64,
        noise: Variance,
    ) {
        key.0.encrypt_glwe(
            &mut output.0,
            &input.0,
            noise,
            &mut self.encryption_generator,
        );
    }
}
